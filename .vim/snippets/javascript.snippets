# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}){
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}}
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}};
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet getE
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# node module
snippet module
	// var dependency = require('foo')
	//   , d2 = blah
	// ;

	// export = function(){};
	// module.exports = export;
# console.log
snippet clog
	console.log('${1:got here}');
# else block
snippet else
	else { $1 }
snippet makepromise
	var deferred = $q.defer();
	true && deferred.resolve('yep');
	false && deferred.reject('nope');
	return deferred.promise;
snippet itshould
	it('should ${1}', function() {
	  expect(result).toEqual(expected);
	});
snippet test
	test('it ${1}', function(assert) {
		${2}
	});
snippet try
	try {
		${1}
	} catch(e) {
		${2}
	}
snippet impmock
	import { mock } from 'rallypoint-mobile-fe/tests/helpers/mock';
snippet sinon
	import sinon from 'sinon';
snippet ember
	import Ember from 'ember';
snippet forin
	for( let ${1:index} in ${2:list} ){

	}
snippet const
	import { get, set, computed } from '@ember/object';
	import { alias } from '@ember/object/computed';
snippet actions 
	actions: {
		${1}
	}
snippet wait
	import wait from 'ember-test-helpers/wait';
snippet super
	this._super(...arguments)
snippet set
	set(${1:this}, ${2:key}, ${3:value});
snippet get
	get(${1:this}, ${2:key});
snippet ec
	import { task, drop } from 'ember-concurrency';
snippet pageobj
	import { create } from 'ember-cli-page-object';
	
	const props = { $2 }
	
	export default create(props);
	export { props as $1 };
snippet pt
	pauseTest();
snippet	andThen
	andThen(() => {
		${1}
	});
snippet	andthen
	andThen(() => {
		${1}
	});
snippet	at
	andThen(() => {
		${1}
	});
snippet mob
	rallypoint-mobile-fe
snippet desk
	desktop-frontend
snippet com
	rp-common
snippet stop
	assert.async();
snippet intest
	${3}: computed(function() {
	  return get(this, 'experimentLookup').inExperimentGroup('${1:experiment-name}', '${2:control}');
	}),
snippet task
	${1:taskName}: task(${2:drop, }function* () {
	})${3:,}
snippet experiment
	experimentLookup: service(),

	isControlGroup: computed(function() {
	  return get(this, 'experimentLookup').inExperimentGroup('${1}', 'control');
	})
snippet experimenttest
	this.application.register('services:experiment-lookup', Service.extend({
	  inExperimentGroup: () => ${1:false}
	}));
	this.application.inject('${2:component}', 'experimentLookup', 'services:experiment-lookup');
snippet cp
	computed(${1:'foo'}, function() {
	  $3
	})${2:,}
snippet ()
	($3) {
		$1
	}$2
snippet i18n
	get(this, 'i18n').t('${1:mytranslation}')$2
snippet isArray
	import { isArray } from '@ember/array';
snippet service
	import { inject as service } from '@ember/service';
snippet asserteq
	assert.equal($1, $2);
snippet next
	import { next } from '@ember/runloop';
snippet randomInt
	(min, max) => Math.floor((Math.random()*(max-min+1))+min);
snippet awesome
	import { conditional } from 'ember-awesome-macros';
snippet lint
	// eslint-disable-next-line
snippet stack
	var stack = new Error().stack;
	console.log("PRINTING CALL STACK");
	console.log( stack );
snippet slog
	server.logging = true;
